use std::time::Duration;

use criterion::{Criterion, criterion_group, criterion_main};

use rust_ffi::{multiply, multiply_l, multiply_pf};

fn ffi_multiply_benchmark(c: &mut Criterion) {
    c.bench_function("ffi multiply", |bn| bn.iter(
        || {
            let mut a = [1.0, 2.0, 3.0, 4.0, 5.0, 6.0, 7.0, 8.0, 9.0, 10.0,
                         1.0, 2.0, 3.0, 4.0, 5.0, 6.0, 7.0, 8.0, 9.0, 10.0,
                         1.0, 2.0, 3.0, 4.0, 5.0, 6.0, 7.0, 8.0, 9.0, 10.0,
                         1.0, 2.0, 3.0, 4.0, 5.0, 6.0, 7.0, 8.0, 9.0, 10.0,
                         1.0, 2.0, 3.0, 4.0, 5.0, 6.0, 7.0, 8.0, 9.0, 10.0,
                         1.0, 2.0, 3.0, 4.0, 5.0, 6.0, 7.0, 8.0, 9.0, 10.0,
                         1.0, 2.0, 3.0, 4.0, 5.0, 6.0, 7.0, 8.0, 9.0, 10.0,
                         1.0, 2.0, 3.0, 4.0, 5.0, 6.0, 7.0, 8.0, 9.0, 10.0,
                         1.0, 2.0, 3.0, 4.0, 5.0, 6.0, 7.0, 8.0, 9.0, 10.0,
                         1.0, 2.0, 3.0, 4.0, 5.0, 6.0, 7.0, 8.0, 9.0, 10.0,
                         1.0, 2.0, 3.0, 4.0, 5.0, 6.0, 7.0, 8.0, 9.0, 10.0,
                         1.0, 2.0, 3.0, 4.0, 5.0, 6.0, 7.0, 8.0, 9.0, 10.0,
                         1.0, 2.0, 3.0, 4.0, 5.0, 6.0, 7.0, 8.0, 9.0, 10.0,
                         1.0, 2.0, 3.0, 4.0, 5.0, 6.0, 7.0, 8.0, 9.0, 10.0,
                         1.0, 2.0, 3.0, 4.0, 5.0, 6.0, 7.0, 8.0, 9.0, 10.0,
                         1.0, 2.0, 3.0, 4.0, 5.0, 6.0, 7.0, 8.0, 9.0, 10.0,
                         1.0, 2.0, 3.0, 4.0, 5.0, 6.0, 7.0, 8.0, 9.0, 10.0,
                         1.0, 2.0, 3.0, 4.0, 5.0, 6.0, 7.0, 8.0, 9.0, 10.0,
                         1.0, 2.0, 3.0, 4.0, 5.0, 6.0, 7.0, 8.0, 9.0, 10.0,
                         1.0, 2.0, 3.0, 4.0, 5.0, 6.0, 7.0, 8.0, 9.0, 10.0,
                         1.0, 2.0, 3.0, 4.0, 5.0, 6.0, 7.0, 8.0, 9.0, 10.0,
                         1.0, 2.0, 3.0, 4.0, 5.0, 6.0, 7.0, 8.0, 9.0, 10.0,
                         1.0, 2.0, 3.0, 4.0, 5.0, 6.0, 7.0, 8.0, 9.0, 10.0,
                         1.0, 2.0, 3.0, 4.0, 5.0, 6.0, 7.0, 8.0, 9.0, 10.0,
                         1.0, 2.0, 3.0, 4.0, 5.0, 6.0, 7.0, 8.0, 9.0, 10.0,
                         1.0, 2.0, 3.0, 4.0, 5.0, 6.0, 7.0, 8.0, 9.0, 10.0];
            let mut b = [7.0, 5.0, 5.0, 2.0, 9.0, 6.0, 7.0, 2.0, 1.0, 3.0,
                         3.0, 1.0, 1.0, 4.0, 5.0, 6.0, 7.0, 9.0, 9.0, 2.0,
                         7.0, 5.0, 5.0, 2.0, 9.0, 6.0, 7.0, 2.0, 1.0, 3.0,
                         3.0, 1.0, 1.0, 4.0, 5.0, 6.0, 7.0, 9.0, 9.0, 2.0,
                         7.0, 5.0, 5.0, 2.0, 9.0, 6.0, 7.0, 2.0, 1.0, 3.0,
                         3.0, 1.0, 1.0, 4.0, 5.0, 6.0, 7.0, 9.0, 9.0, 2.0,
                         7.0, 5.0, 5.0, 2.0, 9.0, 6.0, 7.0, 2.0, 1.0, 3.0,
                         3.0, 1.0, 1.0, 4.0, 5.0, 6.0, 7.0, 9.0, 9.0, 2.0,
                         7.0, 5.0, 5.0, 2.0, 9.0, 6.0, 7.0, 2.0, 1.0, 3.0,
                         3.0, 1.0, 1.0, 4.0, 5.0, 6.0, 7.0, 9.0, 9.0, 2.0,
                         7.0, 5.0, 5.0, 2.0, 9.0, 6.0, 7.0, 2.0, 1.0, 3.0,
                         3.0, 1.0, 1.0, 4.0, 5.0, 6.0, 7.0, 9.0, 9.0, 2.0,
                         7.0, 5.0, 5.0, 2.0, 9.0, 6.0, 7.0, 2.0, 1.0, 3.0,
                         3.0, 1.0, 1.0, 4.0, 5.0, 6.0, 7.0, 9.0, 9.0, 2.0,
                         7.0, 5.0, 5.0, 2.0, 9.0, 6.0, 7.0, 2.0, 1.0, 3.0,
                         3.0, 1.0, 1.0, 4.0, 5.0, 6.0, 7.0, 9.0, 9.0, 2.0,
                         7.0, 5.0, 5.0, 2.0, 9.0, 6.0, 7.0, 2.0, 1.0, 3.0,
                         3.0, 1.0, 1.0, 4.0, 5.0, 6.0, 7.0, 9.0, 9.0, 2.0,
                         7.0, 5.0, 5.0, 2.0, 9.0, 6.0, 7.0, 2.0, 1.0, 3.0,
                         6.0, 2.0, 8.0, 2.0, 5.0, 3.0, 1.0, 1.0, 4.0, 5.0];

            multiply(&mut a, &mut b);
        })
    );
}

fn ffi_multiply_l_benchmark(c: &mut Criterion) {
    c.bench_function("ffi multiply_l", |bn| bn.iter(
        || {
            let mut a = [1.0, 2.0, 3.0, 4.0, 5.0, 6.0, 7.0, 8.0, 9.0, 10.0,
                         1.0, 2.0, 3.0, 4.0, 5.0, 6.0, 7.0, 8.0, 9.0, 10.0,
                         1.0, 2.0, 3.0, 4.0, 5.0, 6.0, 7.0, 8.0, 9.0, 10.0,
                         1.0, 2.0, 3.0, 4.0, 5.0, 6.0, 7.0, 8.0, 9.0, 10.0,
                         1.0, 2.0, 3.0, 4.0, 5.0, 6.0, 7.0, 8.0, 9.0, 10.0,
                         1.0, 2.0, 3.0, 4.0, 5.0, 6.0, 7.0, 8.0, 9.0, 10.0,
                         1.0, 2.0, 3.0, 4.0, 5.0, 6.0, 7.0, 8.0, 9.0, 10.0,
                         1.0, 2.0, 3.0, 4.0, 5.0, 6.0, 7.0, 8.0, 9.0, 10.0,
                         1.0, 2.0, 3.0, 4.0, 5.0, 6.0, 7.0, 8.0, 9.0, 10.0,
                         1.0, 2.0, 3.0, 4.0, 5.0, 6.0, 7.0, 8.0, 9.0, 10.0,
                         1.0, 2.0, 3.0, 4.0, 5.0, 6.0, 7.0, 8.0, 9.0, 10.0,
                         1.0, 2.0, 3.0, 4.0, 5.0, 6.0, 7.0, 8.0, 9.0, 10.0,
                         1.0, 2.0, 3.0, 4.0, 5.0, 6.0, 7.0, 8.0, 9.0, 10.0,
                         1.0, 2.0, 3.0, 4.0, 5.0, 6.0, 7.0, 8.0, 9.0, 10.0,
                         1.0, 2.0, 3.0, 4.0, 5.0, 6.0, 7.0, 8.0, 9.0, 10.0,
                         1.0, 2.0, 3.0, 4.0, 5.0, 6.0, 7.0, 8.0, 9.0, 10.0,
                         1.0, 2.0, 3.0, 4.0, 5.0, 6.0, 7.0, 8.0, 9.0, 10.0,
                         1.0, 2.0, 3.0, 4.0, 5.0, 6.0, 7.0, 8.0, 9.0, 10.0,
                         1.0, 2.0, 3.0, 4.0, 5.0, 6.0, 7.0, 8.0, 9.0, 10.0,
                         1.0, 2.0, 3.0, 4.0, 5.0, 6.0, 7.0, 8.0, 9.0, 10.0,
                         1.0, 2.0, 3.0, 4.0, 5.0, 6.0, 7.0, 8.0, 9.0, 10.0,
                         1.0, 2.0, 3.0, 4.0, 5.0, 6.0, 7.0, 8.0, 9.0, 10.0,
                         1.0, 2.0, 3.0, 4.0, 5.0, 6.0, 7.0, 8.0, 9.0, 10.0,
                         1.0, 2.0, 3.0, 4.0, 5.0, 6.0, 7.0, 8.0, 9.0, 10.0,
                         1.0, 2.0, 3.0, 4.0, 5.0, 6.0, 7.0, 8.0, 9.0, 10.0,
                         1.0, 2.0, 3.0, 4.0, 5.0, 6.0, 7.0, 8.0, 9.0, 10.0];
            let mut b = [7.0, 5.0, 5.0, 2.0, 9.0, 6.0, 7.0, 2.0, 1.0, 3.0,
                         3.0, 1.0, 1.0, 4.0, 5.0, 6.0, 7.0, 9.0, 9.0, 2.0,
                         7.0, 5.0, 5.0, 2.0, 9.0, 6.0, 7.0, 2.0, 1.0, 3.0,
                         3.0, 1.0, 1.0, 4.0, 5.0, 6.0, 7.0, 9.0, 9.0, 2.0,
                         7.0, 5.0, 5.0, 2.0, 9.0, 6.0, 7.0, 2.0, 1.0, 3.0,
                         3.0, 1.0, 1.0, 4.0, 5.0, 6.0, 7.0, 9.0, 9.0, 2.0,
                         7.0, 5.0, 5.0, 2.0, 9.0, 6.0, 7.0, 2.0, 1.0, 3.0,
                         3.0, 1.0, 1.0, 4.0, 5.0, 6.0, 7.0, 9.0, 9.0, 2.0,
                         7.0, 5.0, 5.0, 2.0, 9.0, 6.0, 7.0, 2.0, 1.0, 3.0,
                         3.0, 1.0, 1.0, 4.0, 5.0, 6.0, 7.0, 9.0, 9.0, 2.0,
                         7.0, 5.0, 5.0, 2.0, 9.0, 6.0, 7.0, 2.0, 1.0, 3.0,
                         3.0, 1.0, 1.0, 4.0, 5.0, 6.0, 7.0, 9.0, 9.0, 2.0,
                         7.0, 5.0, 5.0, 2.0, 9.0, 6.0, 7.0, 2.0, 1.0, 3.0,
                         3.0, 1.0, 1.0, 4.0, 5.0, 6.0, 7.0, 9.0, 9.0, 2.0,
                         7.0, 5.0, 5.0, 2.0, 9.0, 6.0, 7.0, 2.0, 1.0, 3.0,
                         3.0, 1.0, 1.0, 4.0, 5.0, 6.0, 7.0, 9.0, 9.0, 2.0,
                         7.0, 5.0, 5.0, 2.0, 9.0, 6.0, 7.0, 2.0, 1.0, 3.0,
                         3.0, 1.0, 1.0, 4.0, 5.0, 6.0, 7.0, 9.0, 9.0, 2.0,
                         7.0, 5.0, 5.0, 2.0, 9.0, 6.0, 7.0, 2.0, 1.0, 3.0,
                         6.0, 2.0, 8.0, 2.0, 5.0, 3.0, 1.0, 1.0, 4.0, 5.0];


            multiply_l(&mut a, &mut b);
        })
    );
}

fn ffi_multiply_pf_benchmark(c: &mut Criterion) {
    c.bench_function("ffi multiply_pf", |bn| bn.iter(
        || {
            let mut a = [1.0, 2.0, 3.0, 4.0, 5.0, 6.0, 7.0, 8.0, 9.0, 10.0,
                         1.0, 2.0, 3.0, 4.0, 5.0, 6.0, 7.0, 8.0, 9.0, 10.0,
                         1.0, 2.0, 3.0, 4.0, 5.0, 6.0, 7.0, 8.0, 9.0, 10.0,
                         1.0, 2.0, 3.0, 4.0, 5.0, 6.0, 7.0, 8.0, 9.0, 10.0,
                         1.0, 2.0, 3.0, 4.0, 5.0, 6.0, 7.0, 8.0, 9.0, 10.0,
                         1.0, 2.0, 3.0, 4.0, 5.0, 6.0, 7.0, 8.0, 9.0, 10.0,
                         1.0, 2.0, 3.0, 4.0, 5.0, 6.0, 7.0, 8.0, 9.0, 10.0,
                         1.0, 2.0, 3.0, 4.0, 5.0, 6.0, 7.0, 8.0, 9.0, 10.0,
                         1.0, 2.0, 3.0, 4.0, 5.0, 6.0, 7.0, 8.0, 9.0, 10.0,
                         1.0, 2.0, 3.0, 4.0, 5.0, 6.0, 7.0, 8.0, 9.0, 10.0,
                         1.0, 2.0, 3.0, 4.0, 5.0, 6.0, 7.0, 8.0, 9.0, 10.0,
                         1.0, 2.0, 3.0, 4.0, 5.0, 6.0, 7.0, 8.0, 9.0, 10.0,
                         1.0, 2.0, 3.0, 4.0, 5.0, 6.0, 7.0, 8.0, 9.0, 10.0,
                         1.0, 2.0, 3.0, 4.0, 5.0, 6.0, 7.0, 8.0, 9.0, 10.0,
                         1.0, 2.0, 3.0, 4.0, 5.0, 6.0, 7.0, 8.0, 9.0, 10.0,
                         1.0, 2.0, 3.0, 4.0, 5.0, 6.0, 7.0, 8.0, 9.0, 10.0,
                         1.0, 2.0, 3.0, 4.0, 5.0, 6.0, 7.0, 8.0, 9.0, 10.0,
                         1.0, 2.0, 3.0, 4.0, 5.0, 6.0, 7.0, 8.0, 9.0, 10.0,
                         1.0, 2.0, 3.0, 4.0, 5.0, 6.0, 7.0, 8.0, 9.0, 10.0,
                         1.0, 2.0, 3.0, 4.0, 5.0, 6.0, 7.0, 8.0, 9.0, 10.0,
                         1.0, 2.0, 3.0, 4.0, 5.0, 6.0, 7.0, 8.0, 9.0, 10.0,
                         1.0, 2.0, 3.0, 4.0, 5.0, 6.0, 7.0, 8.0, 9.0, 10.0,
                         1.0, 2.0, 3.0, 4.0, 5.0, 6.0, 7.0, 8.0, 9.0, 10.0,
                         1.0, 2.0, 3.0, 4.0, 5.0, 6.0, 7.0, 8.0, 9.0, 10.0,
                         1.0, 2.0, 3.0, 4.0, 5.0, 6.0, 7.0, 8.0, 9.0, 10.0,
                         1.0, 2.0, 3.0, 4.0, 5.0, 6.0, 7.0, 8.0, 9.0, 10.0];
            let mut b = [7.0, 5.0, 5.0, 2.0, 9.0, 6.0, 7.0, 2.0, 1.0, 3.0,
                         3.0, 1.0, 1.0, 4.0, 5.0, 6.0, 7.0, 9.0, 9.0, 2.0,
                         7.0, 5.0, 5.0, 2.0, 9.0, 6.0, 7.0, 2.0, 1.0, 3.0,
                         3.0, 1.0, 1.0, 4.0, 5.0, 6.0, 7.0, 9.0, 9.0, 2.0,
                         7.0, 5.0, 5.0, 2.0, 9.0, 6.0, 7.0, 2.0, 1.0, 3.0,
                         3.0, 1.0, 1.0, 4.0, 5.0, 6.0, 7.0, 9.0, 9.0, 2.0,
                         7.0, 5.0, 5.0, 2.0, 9.0, 6.0, 7.0, 2.0, 1.0, 3.0,
                         3.0, 1.0, 1.0, 4.0, 5.0, 6.0, 7.0, 9.0, 9.0, 2.0,
                         7.0, 5.0, 5.0, 2.0, 9.0, 6.0, 7.0, 2.0, 1.0, 3.0,
                         3.0, 1.0, 1.0, 4.0, 5.0, 6.0, 7.0, 9.0, 9.0, 2.0,
                         7.0, 5.0, 5.0, 2.0, 9.0, 6.0, 7.0, 2.0, 1.0, 3.0,
                         3.0, 1.0, 1.0, 4.0, 5.0, 6.0, 7.0, 9.0, 9.0, 2.0,
                         7.0, 5.0, 5.0, 2.0, 9.0, 6.0, 7.0, 2.0, 1.0, 3.0,
                         3.0, 1.0, 1.0, 4.0, 5.0, 6.0, 7.0, 9.0, 9.0, 2.0,
                         7.0, 5.0, 5.0, 2.0, 9.0, 6.0, 7.0, 2.0, 1.0, 3.0,
                         3.0, 1.0, 1.0, 4.0, 5.0, 6.0, 7.0, 9.0, 9.0, 2.0,
                         7.0, 5.0, 5.0, 2.0, 9.0, 6.0, 7.0, 2.0, 1.0, 3.0,
                         3.0, 1.0, 1.0, 4.0, 5.0, 6.0, 7.0, 9.0, 9.0, 2.0,
                         7.0, 5.0, 5.0, 2.0, 9.0, 6.0, 7.0, 2.0, 1.0, 3.0,
                         6.0, 2.0, 8.0, 2.0, 5.0, 3.0, 1.0, 1.0, 4.0, 5.0];

            multiply_pf(&mut a, &mut b);
        })
    );
}



criterion_group!(
    name = benches;
    config = Criterion::default().measurement_time(Duration::new(30, 0));
    targets = ffi_multiply_benchmark, ffi_multiply_l_benchmark // , ffi_multiply_pf_benchmark
);
criterion_main!(benches);
